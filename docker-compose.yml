services:
  mov:
    image: valawai/mov:${MOV_TAG:-latest}
    container_name: mov
    profiles: [mov, all]
    depends_on:
      mongo:
        condition: service_healthy
        restart: true
      mq:
        condition: service_healthy
        restart: true
    ports:
      - ${MOV_UI_PORT:-8081}:8080
    networks:
      - email_sensor_net
    environment:
      RABBITMQ_HOST: ${MOV_MQ_HOST:-mq}
      RABBITMQ_PORT: ${MOV_MQ_PORT:-5672}
      RABBITMQ_USERNAME: ${MOV_MQ_USER:-mov}
      RABBITMQ_PASSWORD: ${MOV_MQ_PASSWORD:-password}
      QUARKUS_MONGODB_DATABASE: ${MOV_DB_NAME:-movDB}
      QUARKUS_MONGODB_CREDENTIALS_USERNAME: ${MOV_DB_USER_NAME:-mov}
      QUARKUS_MONGODB_CREDENTIALS_PASSWORD: ${MOV_DB_USER_PASSWORD:-password}
      QUARKUS_MONGODB_HOSTS: ${MOV_DB_HOST:-mongo}:${MOV_DB_PORT:-27017}
      MOV_URL: http://0.0.0.0:${MOV_UI_PORT:-8081}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:8080/q/health | grep -m 1 -P \"^[\\s|\\{|\\\"]+status[\\s|\\:|\\\"]+.+\\\"\" |grep -q \"\\\"UP\\\"\"",
        ]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 1m
      start_interval: 5s

  mq:
    image: rabbitmq:${RABBITMQ_TAG:-management}
    container_name: mov_mq
    pull_policy: daily
    profiles: [mov, all]
    hostname: ${MOV_MQ_HOST:-mq}
    ports:
      - ${MOV_MQ_PORT:-5672}:5672
      - ${MOV_MQ_UI_PORT:-8082}:15672
    networks:
      - email_sensor_net
    environment:
      RABBITMQ_DEFAULT_USER: ${MOV_MQ_USER:-mov}
      RABBITMQ_DEFAULT_PASS: ${MOV_MQ_PASSWORD:-password}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 1m
      start_interval: 5s

  mongo:
    image: mongo:${MONGODB_TAG:-latest}
    container_name: mov_db
    restart: unless-stopped
    pull_policy: daily
    profiles: [mov, all]
    hostname: ${DB_HOST:-mongo}
    ports:
      - ${MONGO_LOCAL_PORT:-27017}:27017
    networks:
      - email_sensor_net
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${DB_NAME:-movDB}
      MOV_DB_NAME: ${MOV_DB_NAME:-movDB}
      MOV_DB_USER_NAME: ${MOV_DB_USER_NAME:-mov}
      MOV_DB_USER_PASSWORD: ${MOV_DB_USER_PASSWORD:-password}
    volumes:
       - ${MONGO_LOCAL_DATA:-~/.mongo_data/emailSensorMovDB}:/data/db
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mongosh --quiet localhost/${DB_NAME:-movDB} --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
        ]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 1m
      start_interval: 5s
    configs:
      - source: initialize-movDB.js
        target: /docker-entrypoint-initdb.d/init-mongo.js

  mail: 
    image: axllent/mailpit:${MAILPIT_TAG:-latest}
    container_name: mail
    profiles: [mail, all]
    hostname: ${MAIL_HOST:-mail}
    ports:
      - "${MAIL_SMTP_PORT:-1025}:1025"
      - "${MAIL_POP3_PORT:-1110}:1110"
      - "${MAIL_WEB:-8083}:8025"
    networks:
      - email_sensor_net
    environment:
      MP_POP3_AUTH: "${MAIL_USER_NAME:-user}:${MAIL_USER_PASSWORD:-password}"
      MP_SMTP_AUTH: "${MAIL_USER_NAME:-user}:${MAIL_USER_PASSWORD:-password}"
      MP_SMTP_AUTH_ALLOW_INSECURE: true

  email_sensor:
    image: valawai/c0_email_sensor:${C0_EMAIL_SENSOR_TAG:-latest}
    container_name: c0_email_sensor
    profiles: [component, all]
    networks:
      - email_sensor_net
    depends_on:
      mov:
        condition: service_healthy
        required: false
      mail:
        condition: service_started
        required: false
    ports:
      - ${C0_EMAIL_SENSOR_PORT:-8080}:8080
    environment:
      RABBITMQ_HOST: ${MQ_HOST:-mq}
      RABBITMQ_PORT: ${MQ_PORT:-5672}
      RABBITMQ_USERNAME: ${MQ_USER:-mov}
      RABBITMQ_PASSWORD: ${MQ_PASSWORD:-password}
      MAIL_PROTOCOL: ${MAIL_PROTOCOL:-pop3}
      MAIL_SECURED: ${MAIL_SECURED:-false}
      MAIL_HOST: ${MAIL_HOST:-mail}
      MAIL_PORT: ${MAIL_POP3:-1110}
      MAIL_USER_NAME: ${MAIL_USER_NAME:-user}
      MAIL_USER_PASSWORD: ${MAIL_USER_PASSWORD:-password}
	  C0_EMAIL_SENSOR_FETCHING_INTERVAL: ${C0_EMAIL_SENSOR_FETCHING_INTERVAL:-60}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:8080/q/health | grep -m 1 -P \"^[\\s|\\{|\\\"]+status[\\s|\\:|\\\"]+.+\\\"\" |grep -q \"\\\"UP\\\"\"",
        ]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 1m
      start_interval: 5s

networks:
  email_sensor_net:

configs:
  initialize-movDB.js:
    content: |
      db.createUser({
        user: process.env.MOV_DB_USER_NAME,
        pwd: process.env.MOV_DB_USER_PASSWORD,
        roles: [{
          role: 'readWrite',
          db: process.env.MOV_DB_NAME
        }]
      })
